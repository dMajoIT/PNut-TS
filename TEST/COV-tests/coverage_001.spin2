CON

' this compiles w/v43

  _clkfreq = 100_000_00
  screen_size = 1024

OBJ

  fakeChild: "coverage_002"


PUB Go() | alignw word localWord[3]

VAR

  long screen[screen_size]
  long color

  long myStack[64]

PUB testFIELD() | i, k

  i := ^@CLKMODE
  'i := ^@k

  -= field[i][i]

PUB testCOGSPIN() | cog, methodPtr

  cog := cogspin(NEWCOG, testCheckVariableMethod(), 0)
  cogspin(1, methodPtr(), @myStack)
  'cog := cogspin(NEWCOG, fakeChild.testIF(), @myStack)

PUB testObjCall()
  fakeChild.testIF()

PUB testCheckVariableMethod() | methodPtr, rslt, a, b, myString

  myString := @"this is a string"

  myString := string("this is a string")
  'myString := lstring("this is a string") 'hold this until v44

 methodPtr := @test2Rets ' create method ptr
 a,b := methodPtr():2

 SEND := @testNoRet
 RECV := @test1Ret

 SEND(0)
 rslt := RECV()

PRI test2Rets():x,y

PRI testNoRet(byteVar)

PRI test1Ret() : byteVal

PUB testLOCByteWord() | byte var1, word var2

   var1++
   var2--
   ' more checkVariable() covering
   reg[0]++
   BYTE[@var2]++

PRI GoCalled() | byte myByte, alignw myWord, chr, row, col, flag

   CASE chr
       0:
         BYTEFILL(@screen, " ", screen_size)
         col := row := 0
       1:
         col := row := 0
       2..3:
         flag := chr
         RETURN
       7..4:
         flag := chr
         RETURN
       8: IF col
            col--
       9: REPEAT
            out(" ")
          WHILE col & 7
      10: RETURN
      11: color := $00
      12: color := $80
      13: newline()
      other:
        flag := chr

PRI GoCalled2() | byte myByte, alignw myWord, chr, row, col, flag

   CASE_FAST chr
       0:
         BYTEFILL(@screen, " ", screen_size)
         col := row := 0
       1:
         col := row := 0
       2..3:
         flag := chr
         RETURN
       7..4:
         flag := chr
         RETURN
       8: IF col
            col--
       9: REPEAT
            out(" ")
          WHILE col & 7
      10: RETURN
      11: color := $00
      12: color := $80
      13: newline()
      other:
        flag := chr

PRI out(str) | i, col, row

  repeat i from 0 to strsize(str) - 1
    screen[col + row * 32] := str[i]
    col++
    IF col == 32
      col := 0
      row++

PRI newline()


pri lastPrivate()
  if(0)
    pinh(0)

PUB testINLINE()

   ORG 0,3
   byte 1
   END
