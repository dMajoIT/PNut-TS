'' continuing our spin2 coverage code
' {Spin2_v43}

CON

   ' testing resolveOperation()
   NEG_FLOAT_VALUE = -2.5
   ABS_FLOAT_VALUE = abs 2.5
   MUL_FLOAT_VALUE = 1.5 * 2.5
   ADD_INT_VALUE = 1 + 5
   SUB_INT_VALUE = 1 - 5
   TEST_FLOAT_VALUE = 1.0 < 5.4
   TEST_LE_FLOAT_VALUE = 1.0 <= 5.4
   TEST_DEQ_EQ_FLOAT_VALUE = 1.0 == 1.0
   TEST_DEQ_NE_FLOAT_VALUE = 1.0 == 5.4
   TEST_GTLT_EQ_FLOAT_VALUE = 1.0 <> 1.0
   TEST_GTLT_NE_FLOAT_VALUE = 1.0 <> 5.4

PUB testABORT()
   abort

PUB testLString() | strPtr, miscPtr, value, startPin, endPin, pinCount

    strPtr := lstring("hello")
    miscPtr := byte(1,3,5,7)
    value := float(100)
    value := round(100.6)
    value := trunc(100.9)
    value := abs -100
    value := fabs -100.9
    value := encod 45
    value := decod 45
    value := bmask 24
    value := ones 24
    value := sqrt 24
    value := fsqrt 24.0
    'value := qlog $d83790b2 ' ==> $fe0cfa26
    'value := qexp $e3a3b5b6 ' ==> $15ee7a9e
    value := qlog $439eb72f ' ==> $f0a290cc:  found possibility of LSBIT(s) differences, test setup to not cause this.
    'value := qexp $e6c6723e ' ==> $1cc72f24:
    value := qexp $f73d41fd ' ==> $77d5e078:
    value := -10000 sar 2
    value := 10000 ror 2
    value := -10000 rol 2
    value := -10000 zerox 20
    value := -10000 signx 4
    value := -10000 ^ 4
    value := 32.0 *. 4.0
    value := 32.0 /. 4.0
    value := 32.0 +. 4.0
    value := 32.0 -. 4.0
    value := 32 +/ 4
    value := 32 // 4
    value := 32 +// 4
    value := 32 sca 4
    value := -32 scas 4
    value := 32 frac 40
    value := 32 #> 12
    value := 5 <# 12
    value := 5 < 12
    value := 5.4 <. 12.7
    value := 32 +< 12
    value := 32 <= 12
    value := 32 +<= 12
    value := 32.4 <=. 12.2
    value := 32 == 34
    value := 32.0 ==. 32.0
    value := 32.0 ==. 34.5
    value := 32 <> 32
    value := 32 <> 34

    pinh(3..0)
    pinh(startPin..endPin)
    pinh(7..endPin)
    pinh(startPin..0)
    pinh(4 addpins 2)
    pinh(startPin addpins 2)
    pinh(4 addpins pinCount)
    pinw(4 .. 2, 1)
    pinw(startPin .. 2, 1)
    pinw(4 .. pinCount, 1)
    pinw(getPinfieldAndValue())
    pinstart(4 addpins 2, 0,0,0)
    pinstart(startPin addpins 2, 0,0,0)
    pinstart(4 addpins pinCount, 0,0,0)

PRI getPinfieldAndValue(): pinField, value
  pinField := 3 addpins 4
  value := $1f ' all pins set high

PUB testCOGINIT() | result
    coginit(COGEXEC_NEW, @pasm1,0)
    result := coginit(COGEXEC_NEW, @pasm1,0)

PUB testPrefixOps() | result, in1, rndSeed
  result := ++in1
  result := ??rndSeed
  result := in1--
  result := in1!!
  result := in1!
  result := in1\3
  result := in1~~

PRI testMethodParams() | methodPtr, value

   pinw(1, methodPtr(5,(1)):1)
   pinw(1, recv())
   sndReceivingMthd(1,2)
   send(0,(1))
   send(0, value + -value, value + -1, value + -1.0) ' testing negConToCon
   send(-2, $ffff0001, $efffffff, $c0000000) ' testing compileConstant(), constantWasDecoded()
   send(-1.0, -value, #pasm1) ' testing getConstant()

PRI sndReceivingMthd(parm1, parm2)

PRI testFloatHubOps() | fvariable

   fvariable := fvariable +. 1.0 ' testing enterExpOp()

PRI testCONDATA() | valuePtr

  valuePtr := WORD(4,5,6)
  valuePtr := LONG(4,5,6.0, byte 7)

PRI testCompileVariable() | argument, offsetLeft, bits3Field, offsetRight

' bitfield testing
  'pinh(argument.byte[0].[3..0]) ' no coverage change
  pinh(argument.byte[0].[offsetLeft..0])
  pinh(argument.byte.[offsetLeft..0])
  pinh(byte[0][0].[offsetLeft..0])
  pinh(byte[0][0].[0..offsetRight]) ' testing checkVariableBitfield()

  ' field coverage
  bits3Field := ^@argument.[23..21]
  pinh(field[bits3Field])

  ' register coverage
  pinh(reg[0][0].[offsetLeft..0]) ' non-fi with index
  pinh(reg[0][argument].[offsetLeft..0]) ' else case ??

  pinh(reg[$1f8].[offsetLeft..0]) ' if case
  pinh(reg[pr0].[offsetLeft..0]) ' 2nd if case

  ' handle hub byte/word/long with index but NOT CLKFREQ read
  pinh(clkmode[1])

  pinh(-. 5.0)

pri testSENDoddly()

   send(send(0)) ' testing checkVariableMethod()


DAT
   org
   mov reg1,#-reg2 & $1ff  ' testing getConstant() fourth "resultStatus.foundConstant = false;" case
   'mov reg1,#-3 & $1ff  ' testing getConstant() fourth "resultStatus.foundConstant = false;" case
pasm1 nop

reg1  res 1
reg2  res 1

testRFVar long  fvars -10000 ' testing compileDatRfvars()
