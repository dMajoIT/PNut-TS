;		oc		op		prec	bytecode	ternary	binary	unary	assign	float	alias	hubcode

opcode		oc_bitnot,	op_bitnot,	0,	bc_bitnot,	0,	0,	1,	1,	0,	0,	0	; !
opcode		oc_neg,		op_neg,		0,	bc_neg,		0,	0,	1,	1,	1,	0,	0	; -	(uses op_sub symbol)
opcode		oc_fneg,	op_fneg,	0,	bc_fneg,	0,	0,	1,	0,	1,	0,	1	; -.	(uses op_fsub symbol)
opcode		oc_abs,		op_abs,		0,	bc_abs,		0,	0,	1,	1,	1,	0,	0	; ABS
opcode		oc_fabs,	op_fabs,	0,	bc_fabs,	0,	0,	1,	0,	1,	0,	1	; FABS
opcode		oc_encod,	op_encod,	0,	bc_encod,	0,	0,	1,	1,	0,	0,	0	; ENCOD
opcode		oc_decod,	op_decod,	0,	bc_decod,	0,	0,	1,	1,	0,	0,	0	; DECOD
opcode		oc_bmask,	op_bmask,	0,	bc_bmask,	0,	0,	1,	1,	0,	0,	0	; BMASK
opcode		oc_ones,	op_ones,	0,	bc_ones,	0,	0,	1,	1,	0,	0,	0	; ONES
opcode		oc_sqrt,	op_sqrt,	0,	bc_sqrt,	0,	0,	1,	1,	0,	0,	0	; SQRT
opcode		oc_fsqrt,	op_fsqrt,	0,	bc_fsqrt,	0,	0,	1,	0,	1,	0,	1	; FSQRT
opcode		oc_qlog,	op_qlog,	0,	bc_qlog,	0,	0,	1,	1,	0,	0,	0	; QLOG
opcode		oc_qexp,	op_qexp,	0,	bc_qexp,	0,	0,	1,	1,	0,	0,	0	; QEXP
opcode		oc_shr,		op_shr,		1,	bc_shr,		0,	1,	0,	1,	0,	0,	0	; >>
opcode		oc_shl,		op_shl,		1,	bc_shl,		0,	1,	0,	1,	0,	0,	0	; <<
opcode		oc_sar,		op_sar,		1,	bc_sar,		0,	1,	0,	1,	0,	0,	0	; SAR
opcode		oc_ror,		op_ror,		1,	bc_ror,		0,	1,	0,	1,	0,	0,	0	; ROR
opcode		oc_rol,		op_rol,		1,	bc_rol,		0,	1,	0,	1,	0,	0,	0	; ROL
opcode		oc_rev,		op_rev,		1,	bc_rev,		0,	1,	0,	1,	0,	0,	0	; REV
opcode		oc_zerox,	op_zerox,	1,	bc_zerox,	0,	1,	0,	1,	0,	0,	0	; ZEROX
opcode		oc_signx,	op_signx,	1,	bc_signx,	0,	1,	0,	1,	0,	0,	0	; SIGNX
opcode		oc_bitand,	op_bitand,	2,	bc_bitand,	0,	1,	0,	1,	0,	0,	0	; &
opcode		oc_bitxor,	op_bitxor,	3,	bc_bitxor,	0,	1,	0,	1,	0,	0,	0	; ^
opcode		oc_bitor,	op_bitor,	4,	bc_bitor,	0,	1,	0,	1,	0,	0,	0	; |
opcode		oc_mul,		op_mul,		5,	bc_mul,		0,	1,	0,	1,	1,	0,	0	; *
opcode		oc_fmul,	op_fmul,	5,	bc_fmul,	0,	1,	0,	0,	1,	0,	1	; *.
opcode		oc_div,		op_div,		5,	bc_div,		0,	1,	0,	1,	1,	0,	0	; /
opcode		oc_fdiv,	op_fdiv,	5,	bc_fdiv,	0,	1,	0,	0,	1,	0,	1	; /.
opcode		oc_divu,	op_divu,	5,	bc_divu,	0,	1,	0,	1,	0,	0,	0	; +/
opcode		oc_rem,		op_rem,		5,	bc_rem,		0,	1,	0,	1,	0,	0,	0	; //
opcode		oc_remu,	op_remu,	5,	bc_remu,	0,	1,	0,	1,	0,	0,	0	; +//
opcode		oc_sca,		op_sca,		5,	bc_sca,		0,	1,	0,	1,	0,	0,	0	; SCA
opcode		oc_scas,	op_scas,	5,	bc_scas,	0,	1,	0,	1,	0,	0,	0	; SCAS
opcode		oc_frac,	op_frac,	5,	bc_frac,	0,	1,	0,	1,	0,	0,	0	; FRAC
opcode		oc_add,		op_add,		6,	bc_add,		0,	1,	0,	1,	1,	0,	0	; +
opcode		oc_fadd,	op_fadd,	6,	bc_fadd,	0,	1,	0,	0,	1,	0,	1	; +.
opcode		oc_sub,		op_sub,		6,	bc_sub,		0,	1,	0,	1,	1,	0,	0	; -
opcode		oc_fsub,	op_fsub,	6,	bc_fsub,	0,	1,	0,	0,	1,	0,	1	; -.
opcode		oc_fge,		op_fge,		7,	bc_fge,		0,	1,	0,	1,	1,	0,	0	; #>
opcode		oc_fle,		op_fle,		7,	bc_fle,		0,	1,	0,	1,	1,	0,	0	; <#
opcode		oc_addbits,	op_addbits,	8,	bc_addbits,	0,	1,	0,	1,	0,	0,	0	; ADDBITS
opcode		oc_addpins,	op_addpins,	8,	bc_addpins,	0,	1,	0,	1,	0,	0,	0	; ADDPINS
opcode		oc_lt,		op_lt,		9,	bc_lt,		0,	1,	0,	0,	1,	0,	0	; <
opcode		oc_flt,		op_flt,		9,	bc_flt,		0,	1,	0,	0,	1,	0,	1	; <.
opcode		oc_ltu,		op_ltu,		9,	bc_ltu,		0,	1,	0,	0,	0,	0,	0	; +<
opcode		oc_lte,		op_lte,		9,	bc_lte,		0,	1,	0,	0,	1,	0,	0	; <=
opcode		oc_flte,	op_flte,	9,	bc_flte,	0,	1,	0,	0,	1,	0,	1	; <=.
opcode		oc_lteu,	op_lteu,	9,	bc_lteu,	0,	1,	0,	0,	0,	0,	0	; +<=
opcode		oc_e,		op_e,		9,	bc_e,		0,	1,	0,	0,	1,	0,	0	; ==
opcode		oc_fe,		op_fe,		9,	bc_fe,		0,	1,	0,	0,	1,	0,	1	; ==.
opcode		oc_ne,		op_ne,		9,	bc_ne,		0,	1,	0,	0,	1,	0,	0	; <>
opcode		oc_fne,		op_fne,		9,	bc_fne,		0,	1,	0,	0,	1,	0,	1	; <>.
opcode		oc_gte,		op_gte,		9,	bc_gte,		0,	1,	0,	0,	1,	0,	0	; >=
opcode		oc_fgte,	op_fgte,	9,	bc_fgte,	0,	1,	0,	0,	1,	0,	1	; >=.
opcode		oc_gteu,	op_gteu,	9,	bc_gteu,	0,	1,	0,	0,	0,	0,	0	; +>=
opcode		oc_gt,		op_gt,		9,	bc_gt,		0,	1,	0,	0,	1,	0,	0	; >
opcode		oc_fgt,		op_fgt,		9,	bc_fgt,		0,	1,	0,	0,	1,	0,	1	; >.
opcode		oc_gtu,		op_gtu,		9,	bc_gtu,		0,	1,	0,	0,	0,	0,	0	; +>
opcode		oc_ltegt,	op_ltegt,	9,	bc_ltegt,	0,	1,	0,	0,	1,	0,	0	; <=>
opcode		oc_lognot,	op_lognot,	10,	bc_lognot,	0,	0,	1,	1,	0,	1,	0	; !!
opcode		oc_lognot_name,	op_lognot,	10,	bc_lognot,	0,	0,	1,	1,	0,	0,	0	; NOT
opcode		oc_logand,	op_logand,	11,	bc_logand,	0,	1,	0,	1,	0,	1,	0	; &&
opcode		oc_logand_name,	op_logand,	11,	bc_logand,	0,	1,	0,	1,	0,	0,	0	; AND
opcode		oc_logxor,	op_logxor,	12,	bc_logxor,	0,	1,	0,	1,	0,	1,	0	; ^^
opcode		oc_logxor_name,	op_logxor,	12,	bc_logxor,	0,	1,	0,	1,	0,	0,	0	; XOR
opcode		oc_logor,	op_logor,	13,	bc_logor,	0,	1,	0,	1,	0,	1,	0	; ||
opcode		oc_logor_name,	op_logor,	13,	bc_logor,	0,	1,	0,	1,	0,	0,	0	; OR
opcode		oc_ternary,	op_ternary,	14,	0,		1,	0,	0,	1,	0,	0,	0	; ?
