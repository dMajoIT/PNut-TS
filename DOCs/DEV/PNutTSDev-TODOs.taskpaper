DebuggerUnit w/Chip:
	- procedure TDebuggerForm.Breakpoint;  is the core! 

TODO's have best encapsulation of?:
- distiller records
- debug records
TODO's from P2LF 250108:
	- add '#pragma exportdef NAME' which makes symbol appear as if specified as -D on command line.
	- rename preproc output to __pre.spin2 (dual underscore)
	
TODO's from PNut Zoom 250303++:
	Day1: Mon:
		- update tables: @done(2025-03-05)
		- types @done(2025-03-03)
		- byte codes @done(2025-03-03)
		- flexcodes @done(2025-03-03)
		- Directives DITTO @done(2025-03-03)
		- IFs  if_never ->  if_ref @done(2025-03-03)
		- Elementizer @done(2025-03-03)
	Day2: Tue:
		- Finish getElementObj() @done(2025-03-04)
		- Start replacing getElement() with getElementObj() @done(2025-03-04)
	Day3: Wed:
		- Complete changes in check_constant: getConstant() @done(2025-03-05)
		- Rename compileInline() to compileOrg() @done(2025-03-05)
		- Place getElementObj() calls where needed
		- Complete changes in compile_inst()
		- Add new compileOrgh()
	Day4: Thu:
		- expression resolver (resolve_exp?) @done(2025-03-06)
		- FOUND BUG in flt!  bad code. Fixed. Need TEST CASE! @done(2025-03-06)
			-  (seems to work, can't cause to fail!   So can't test) @done(2025-03-06)
		- Adjust compile1 and compile2 @done(2025-03-06)
		- Adjust objSymbols interface (move routines into object) @done(2025-03-06)
	Day5: Fri:
		- Convert objSymbols to new record format @done(2025-03-07)
			- finish writeStructure() in objectSymbols.ts @done(2025-03-07)
			- Implement new record structure recording object @done(2025-03-07)
	Day6: Tue:
			- Complete new record structure recording object @done(2025-03-11)
			- CON block -> structures @done(2025-03-11)
				- call buildStructureRecord() @done(2025-03-11)
	Day7: Thu:
		- DAT block @done(2025-03-17)
			- ditto @done(2025-03-13)
			- orgh @done(2025-03-13)
			- dat struct @done(2025-03-13)
			- debug enable and mask stuff (partial)
			- getElementObj conversion @done(2025-03-13)
	Day8: Fri:
		- DAT block (20 mins) @done(2025-03-14)
			- debug enable and mask stuff (partial) @done(2025-03-14)
				- emit instruction skip @done(2025-03-14)
			- more getElementObj conversion @done(2025-03-14)
			- relative branches crossing:  (move pass check upwards) @done(2025-03-14)
		- VAR block -> using structures, ptrs @done(2025-03-14)
	Day9: Mon:
		- OBJ block -> obj attributes (partial) @done(2025-03-17)
	Day10: Tue:
		- OBJ block -> obj attributes - struct @done(2025-03-18)
		- adjust check_variable() - partial @done(2025-03-18)
	Day11: Wed:
		- adjust check_variable - complete skip_structure_setup() then finish check_variable() PARTIAL @done(2025-03-19)
	Day12: Thu:
		- adjust check_variable - complete skip_structure_setup() then finish check_variable() @done(2025-03-20)
	Day13: Fri:
		- finish 1st half of compile_struct_setup() - all before @@compile: @done(2025-03-21)
		- write 2nd half of compile_struct_setup() - @@compile: @done(2025-03-21)
	Day14: Mon (eve):
		- Finish v50 changes
			- SPIN blocks (PUB, PRI)
				- audit compile_struct_setup() @done(2025-03-24)
				- finish check_variable() all but audit @done(2025-03-24)
	Day15: Tue:
		- Finish v50 changes
			- SPIN blocks (PUB, PRI)
				- audit check_variable() @done(2025-03-26)
				- update compile_variable() complete @done(2025-03-26)
	Day16: Wed:
			- Finish v50 changes
				- SPIN blocks (PUB, PRI)
					- update version symbol tables & version detection @done(2025-03-26)
					- update compile_sub_blocks_id() @done(2025-03-26)
					- compileOrgh() @done(2025-03-26)
					
	Day17: Thu:
		- Finish v50 changes
			- SPIN blocks (PUB, PRI)
				- Update compile_sub_blocks() @done(2025-03-27)
				- Update insert_clock_setter: @done(2025-03-27)
				- Updatedetermine_clock() @done(2025-03-27)
	Day18: Fri:
		- Finish v50 changes
			- SPIN blocks (PUB, PRI)
				- update ct_cogspin() Adding taskspin... @done(2025-03-28)
				- Add check_con_struct_size() @done(2025-03-28)
				- Add get_struct_and_size() @done(2025-03-28)
				- Add get_struct_variable() @done(2025-03-28)
				- Add ct_sizeof() @done(2025-03-28)
				- Update compileTerm() @done(2025-03-28)
				- Start rename of ct_objpubcon() -> ct_objpub() @done(2025-03-28)
				- add structure return fields to checkVariable() @done(2025-03-28)
				- adjust logSavedElementLocation() adding passed index adjustment @done(2025-03-28)
	Day18: Mon:
		- Finish v50 changes
			- SPIN blocks (PUB, PRI)
				- Add compile_struct_compare() @done(2025-03-31)
				- Can we REMOVE ct_objpub_OLD()? @done(2025-03-31)
				- AUDIT ct_objpub()- skipped - catch at regression @done(2025-03-31)
				- AUDIT compileTerm() @done(2025-03-31)
				- Update compileInstruction() @done(2025-03-31)
				- Update compile_var_multi: @done(2025-03-31)
		
	Day19: Tue:
		- Finish v50 changes
			- SPIN blocks (PUB, PRI)
				- Update compileParametersNoParens() @done(2025-04-01)
				- Update compileParameter() @done(2025-04-01)
		- Review DIFF for anything else we missed
			- check processBackTickDebug() @done(2025-04-01)
			- check processNonTickDebug() @done(2025-04-01)
			- account for new exception messages @done(2025-04-01)
	Day20: Wed:
		- added escape string processing @done(2025-04-02)
		- updated some limit variables @done(2025-04-02)
		- update/regenerate tables @done(2025-04-02)
		- update exception message content @done(2025-04-02)
	Day21: Thu:
		- Add code delta from v50 to v51 (starting from compile1, Ended at compile_parameter:) @done(2025-04-03)
	Day22: Fri:
		- STEPHEN   get couple of regression tests updated to v51 @done(2025-04-05)
		- Add code delta from v50 to v51 (starting from compile_parameter:) @done(2025-04-04)
	Weekend:
		- STEPHEN   Adjust existing regression tests to work (recompile w/v51)
			- CON-tests @done(2025-04-05)
			- COV-tests @done(2025-04-05)
			- DAT-PASM-tests @done(2025-04-05)
			- DBG-tests @done(2025-04-05)
			- EXCEPT-tests
			- EXT-tests @done(2025-04-05)
			- FULL
			- LARGE-tests @done(2025-04-05)
			- LOADER-tests @done(2025-04-05)
			- OBJ-tests @done(2025-04-05)
			- PREPROC-tests @done(2025-04-05)
			- SHORT
			- SPIN-tests @done(2025-04-05)
			- VAR-tests @done(2025-04-05)
		- STEPHEN   Add .flash regression test @done(2025-04-05)
		- CHIP           Create a new file for each new version to add to regression tests @done(2025-04-07)
		- STEPHEN  Add new regressions tests for v44 - v51 features (files from chip) @done(2025-04-07)
	Day23: Mon:
		- Run all regression tests to see what to fix @done(2025-04-07)
		- Fix some failing regression tests @done(2025-04-07)
	Day24: Tue (a):
		- Run all regression tests to see what to fix @done(2025-04-08)
		- Fix what we can... getElementObj() code!!! @done(2025-04-08)
	Day24: Tue (b):
		- Run all regression tests to see what to fix @done(2025-04-08)
		- Fix what we can... @done(2025-04-08)
		- TODO: add regression test ensuring the col/scope is being handled correct for objects @done(2025-04-08)
	Day25: Thu:
		- Embellish version regression tests with more code so all locations can be checked @done(2025-04-11)
			get_symbol:
				- build_struct_record:   get_symbol  @@get_name: @done(2025-04-11)
				- check_constant:  get_symbol  @@checkundef: @done(2025-04-11)
				- check_local:  get_symbol  @@is: @done(2025-04-11)
				- get_obj_symbol: get_symbol @done(2025-04-11)
				- compile_struct_setup:  get_symbol  @@notbitfield: @done(2025-04-11)
		- Resume fixing issues found in v45 test @done(2025-04-11)
	Day26: Fri:
		- many struct handling fixes.... @done(2025-04-11)
		- fixed structure record creation! @done(2025-04-11)
		- now fixed one more regression test @done(2025-04-11)
	Day27: Mon:
		- Resume fixing issues found in v45 test - check_var:
			- fixed bug in build_struct_record (skip past equals!) @done(2025-04-14)
			- fixed check_var @done(2025-04-14)
			- ended at still chasing bug in copying structure from child object!
	Day28: Tue:
		- Resume fixing issues found in v45 test - check_var:
			- still chasing bug in copying structure from child object! NOT FOUND
	Day29: Wed:
		- Resume fixing issues found in v45 test - check_var:
			- still chasing bug in copying structure from child object! @done(2025-04-16)
					- found bad isLogging setup @done(2025-04-16)
					- found bad record extract from list @done(2025-04-16)
	Day30: Thu:
		- Resume fixing issues found in v45 test - check_var:
			- Fix 49 parent @done(2025-04-17)
			- Fix 50 @done(2025-04-17)
				- add string end search in dbl-quote string cases @done(2025-04-17)
	Day30-2: Thu Eve:
		- Resume fixing issues found in v45 test - check_var: @done(2025-04-17)
			- Fix 45 @done(2025-04-17)
				- found 3-deep recursive call to compileVar() @done(2025-04-17)
			- Fix math128.spin2 @done(2025-04-18)
	Day31: Mon:
		- Fix Spin2_v51_misc @done(2025-04-21)
	Day32: Tue:
		- I review large tests after carefully generating GOLD files
		- Fix elementizer fix cause of failed to regression tests
			- affect only 1 file! let's fix this!
		- After all regression tests pass, run coverage and add code to test any missing area
	
Upcoming:
	- Review each block handling method for STRUCT addition, etc. DITTO Support
	
	- Add OBJX contants (where?) used by:
		- compile_obj_symbols:
		
		RULE: everythng should be get_element_obj unless is SHOULD NOT be!
		
		- Consumers of get_element_obj:
			- compile_obj_blocks_id: @done(2025-03-04)
			- compile_sub_blocks_id: @done(2025-03-04)
			- compile_dat_blocks: (MIXED! GET AND GET OBJ!)
				- DITTO support
			- compile_sub_blocks:
			- compile_obj_blocks: (MIXED! GET AND GET OBJ!)
			- compile_block: (MIXED! GET AND GET OBJ!)
			- compile_instruction:
			- compile_sub_blocks:
				
		- Consumers of get_element (orig):
				- compile_dat_blocks_fn:
				- compile_con_blocks:
				- compile_var_blocks:
					- STRUCT changes
				- compile_dat:
			
DEBUG_ notes from 240919 zoom:
- FlexSpin DEBUG_DISABLE = 0 or 1
- DEBUG_OBJECT_MASK = $FFFF
- DEBUG_OBJECT_BIT = $0100
- DEBUG_DISABLE = (DEBUG_OBJECT_MASK & DEBUG_OBJECT_BIT)
- Also debug[0-15]()

PREP for CMD-LINE Repair Release (v1.43.3):
	- Fix behavior of -o (#4) @done(2024-12-12)
	- Awaken download via PropPlug (packaging issue) (#5) @done(2024-12-12)
	- Fix compiling of empty VAR section
	
PREP for CMD-LINE Repair Release (v1.43.2):
	- Fix unplanned execution of `pnut_ts -v` after compile @done(2024-09-22)
	- Repair SpinDocument PreProcessor changes! (Regression test fail after PreProc adjustment, fix this!) @done(2024-09-21)

LIMITATION OF PNUT-TS:
	- NOTE: floating point constants: The mantissa (bits 22:0) can be +/- 1 ls-bit off in value

RE-PACKAGING PNut-TS (Self-contained):
	Preparation:
	- in vscode run:    npm run bld-dist
	- copy pkgs/ content to /Users/stephen/Library/CloudStorage/Dropbox/PropV2-Shared/Projects/PNutTS-work/DIST/_pkgs
	- copy out/pnut_ts.js to /Users/stephen/Library/CloudStorage/Dropbox/PropV2-Shared/Projects/PNutTS-work/DIST/_pkgs # cs_pack.sh will use this for macOS images for now...
	- copy prebuilds/ to /Users/stephen/Library/CloudStorage/Dropbox/PropV2-Shared/Projects/PNutTS-work/DIST/_pkgs # cs_pack.sh will use this for macOS images for now...
	- copy out/ext/ to /Users/stephen/Library/CloudStorage/Dropbox/PropV2-Shared/Projects/PNutTS-work/DIST/_pkgs # cs_pack.sh will use this for macOS images for now...
	- ensure content of /Users/stephen/Library/CloudStorage/Dropbox/PropV2-Shared/Projects/PNutTS-work/DIST/_dist is current (has latest stuff)
	Packaging:
	- run     cs_pack.sh  # to fill _unzipped with correctly shaped folders with signed macos exe's
	- run     cs_zip.sh    # to put initial .zip files in _UPLOAD
	- run manually DropDMG to build dmg's for each of two macOS arch's
		- VALIDATE that content of .dmg is correct for each ARCH
	- run     cs_dmg.sh  # to sign the new DMGs
	- run    cs_not_dmgarm64.sh to notarize the arm64 DMG
		- at end run    xcrun stapler staple _unzipped/macos/macos-arm64.dmg   # to complete the DMG
	- run    cs_not_dmgx64.sh to notarize the x64 DMG
		- at end run    xcrun stapler staple _unzipped/macos/macos-x64.dmg   # to complete the DMG
	- run    cs_zip_dmgs.sh  to zip the .dmg files and place the .zips in _UPLOAD
	- UPLOAD all the .zip's to the releases page for the given release
	- run cs_fixUploadNames.sh to formally name the .zip files before uploading to repo as assets
	
RE-PACKAGING PNut-TS (External Node.js):
	Ensure latest files are on _dist folder (ChangeLog.md, etc.)
	- in vscode run:    npm run bld-dist
	- Replace version with new   BUILD_VERSION=MMmmSS  where 014300 is v1.43.00
		- in cs_zip.dmgs.sh
		- in cs_zip.sh
	- run     cs_pack_ext.sh  # to fill _unzipped with correctly shaped folders with signed macos exe's
	- run     cs_zip.sh    # to put initial .zip files in _UPLOAD
	- run manually DropDMG to build dmg's for each of two macOS arch's
		- VALIDATE that content of .dmg is correct for each ARCH
	- run     cs_dmg.sh  # to sign the new DMGs
	- run    cs_not_dmgarm64.sh to notarize the arm64 DMG
		- at end run    xcrun stapler staple _unzipped/macos/macos-arm64.dmg   # to complete the DMG
	- run    cs_not_dmgx64.sh to notarize the x64 DMG
		- at end run    xcrun stapler staple _unzipped/macos/macos-x64.dmg   # to complete the DMG
	- run    cs_zip_dmgs.sh  to zip the .dmg files and place the .zips in _UPLOAD
	- Manually UPLOAD all the .zip's to the releases page for the given release

REPO Preparation to go pubic:
		- update npm package list versions to what our main local container is using! @done(2024-08-29)
		- test on remote machine and fix anything
		
		
PNut_TS PACKAGING Prep:
	- Study ditto to figure out command-line for following script @done(2024-08-30)
	- Build script to create .zips for upload @done(2024-08-30)
	- Figure out signing to use (create in apple-developer) @done(2024-08-30)
	- Figue out dropdmg run and signing... @done(2024-08-30)
	- Create for .dmg files to use for testing (and .zip them) @done(2024-08-30)
	- Figure out notary of .dmg (should do contents, too) @done(2024-08-30)
	- Upload all .zips as v0.43.0 @done(2024-08-30)
	- Write PNut-TS installation for mscOS, Windows, and Linux/RPi in extension repo @done(2024-08-31)
	- Link these installtion notes to PNut-TS installation section in README.md @done(2024-08-31)
	- Test signed packages on remote machine
		- killed: 9 - indicating code signing issue (after unpack from .dmg?)
		- https://eclecticlight.co/2023/06/05/what-to-do-when-an-app-crashes-as-it-opens/
		- https://developer.apple.com/documentation/xcode/diagnosing-issues-using-crash-reports-and-device-logs
		- and... x64 version runs on macOS Apple Silicon but not the DMG installed version??s
		- NEW: neither x64 or amr64 runs on macOS?
			- this has nothing to do with packaging (it happens before packaging!)
			- what?????
				- Environment node.js conflict?
				- Bad packaging by npm pkg?
				- JVM issue?
	- Hrmf... use non-standalone build for now in .dmg for macOS @done(2024-09-04)
	
PNut_TS PACKAGING for testing RELEASE:
		- bump version number to 1.43.0 @done(2024-09-11)
		- INSTALL DOC MAC (.md) Fix install  ofr MAC citing new install of Node.js need! (spin2 ext)
		- retag repo
		- generate packages, run script and sign macOS .exe and .dmg
		- run script to create upload stuff
		- upload to release page
		

PNut_TS Dev NOTEs:
	TODAYs issues w/Chip helping to find:
		- code generation in BLDC - this is floating point diff issue @done(2024-08-15)
		- long runtime in iOTgw - exprected with nested flow control in spin @done
		- TOF out files too big? @done
	
	NESTED PreProc work:
		- ifSideEmits = false
		- elseSideEmits = false
		- inIfSide = false
		
		#ifdef USE_PSRAM16
			- ifSideEmits = if(USE_PSRAM16 is defined)
			- inIfSide = true
		#endif
			- all are false!
		
		
		
		#ifdef USE_PSRAM8
			- ifSideEmits = if(USE_PSRAM8 is defined)
			- inIfSide = true
		#endif
			- all are false!
		
		#ifdef USE_PSRAM4
			- ifSideEmits = if(USE_PSRAM8 is defined)
			- inIfSide = true
		#endif
			- all are false!
			
		#ifdef USE_HYPER
			- ifSideEmits = if(USE_HYPER is defined)
			- inIfSide = true
		#endif
			- all are false!
			
		#ifdef USE_PSRAM_EITHER
		
		#ifdef USE_PSRAM_SLOW
		MA_CLKDIV = 3
		MA_CYMUL = 1
		#define MA_SYSCLK3
		#else
		MA_CLKDIV = 2
		MA_CYMUL = 2
		#endif
		
		#elseifdef USE_HYPER
		MA_CLKDIV = 2
		MA_CYMUL = 1
		#endif
	
	Work USB Issues:
		- How to locate devices:
				- Windows, 
				- macOS, 
				- Linux
			- Need to code this, NOT using serialPort.list()
		- How to connect and toggle DTR to enter boot mode?
			- SCOPE this to see if working!!!
		- How to connect/interact with device for programming
			- explicite platform-specific device name from settings?
			- node serialPort?  does it work everwhere?
				- NEED TO TEST THIS ON Windows/Linux (working on macOS)
		- How to connect/interact with device for DEBUG
		- - explicite platform-specific device name from settings?
	
	NPM Packaging:
		- See SerialPort command line tools packages!
		
	Packaging NOTEs:
			STATUS:
				- failed to get various USB forms build into stand alone node.js executable
				- failed to get node SerialPort to build into pnut-ts and run within VSCode
				- TRIED:
					- node usb (possible but need to get DTR working before can say yes!)
					- node Serial Port - worked on all three platforms under VSCode (but failed to build into PNut)
					- BAD node HID
					- ts-node failed as it does NOT provide node (node in VSCode is not avail to the extension.)
				NODE SerialPort:
					- Proven on all three platforms (but NOT on parallels/Windows/on macOS)
					- Failed to build into standalone executable
				NODE USB:
					- need to prove this on all platforms
					- need to prove that we can control DTR
					- need to prove that it can be packaged for all platforms
				
			ALTERNATE DEVELOPMENT/RESEARCH PATHS:
				- does Node USB make packaging easier? (rather than Node SerialPort?)
			
			DEVELOPMENT/RESEARCH PATHS:
				For AUG toolchain RELEASE:
					- Complete final keyboard testing on all 3 platforms
					- Complete final build testing on Windows - all 3 compilers
					- Complete final build testing - all 3 platforms
					- MACOS keymap works
					- Windows keymap works
					- Linux keymap works
					
				
				Talk with Eric 18 Jun 12:45-13:15L: serial loader approaches:
					Use my loader when?     all the time, no care about using proploder or loadp2
					Does compress need loader or will work with mine?    yes it will work for us
					Is there help I can provide    yes, i will do a local build and feed back results to Eric
				- ID cause of failure to download or flash with loadp2
				
				For JULY PNut_ts RELEASE:
					- Implement dependsOn of CompileTopP2 before download!
					- Get flasher to listen to serial port after download (to show debug output) 
					- PNUT_TS: Add the missing preprocessor abilties!  (nested #ifdefs)
				
				PREP for Initial ToolChain support release:
					- Disable discovery of pnut_ts
					- Remove setting for pnut_ts compiler path
				
				DOCUMENT Migrate to new build env.:
				- Replace user-tasks file
				- Check for keyboard overrides
				- Review keyboard mapping (remove overrides) / (how to add own overrides)
				
				CAN'T FIX:
					- Auto-generate user tasks? - NO, research into taskProvider
					- TECH ISSUE: can't get flasher to read checksum verify response... P2 too quick or?
						- code commented out for now, in download mech.
				
				DONE:
						- Get interacting with pnut-ts working in VSCode build @done(2024-05-21)
							- NOTE: ts-node was NOT a solution for this... @done(2024-05-19)
							- Maybe require external install of pnut-ts? @done(2024-05-21)
					- Ensure that startup scan removes selection when NONE plugs found @done(2024-05-19)
					- FIX startup on spin2 file to show new DEBUG/FLASH controls @done(2024-05-19)
					- FIX behavior of DEBUG/FLASH controls they should toggle when tapped @done(2024-05-19)
					- Add discovery of flexprop flash loader binary @done(2024-05-20)
					- Make a .dmg for macOS install and adjust vscode spin2 to look in installed location for it @done(2024-05-21)
					- Get flasher working in VSCode build @done(2024-05-17)
					- Get search for PropPlugs working in spin2 and recording to workspace settings @done(2024-05-18)
					- Get search for Tools working in spin2 and recording to workspace settings @done(2024-05-18)
					- Specify VSCode settings interface for built-in flash capability @done(2024-05-19)
					- HMMMMM.... head down user tasks path but fed compiler fspec and options @done(2024-05-24)
					- PROVE that toolset discovery works on RPi @done(2024-05-24)
					- PROVE that PropPlug discovery works on RPi @done(2024-05-24)
					- Add dicovery of PNut v4x on Windows, too! @done(2024-05-25)
					- PROVE that toolset discovery works on Windows 10 @done(2024-05-25)
					- PROVE that PropPlug discovery works on Windows 10 @done(2024-05-25)
					- REMOVE enable .bin output setting!   Not needed!!! @done(2024-05-25)
					- TOGGLE Debug() or FLASH removes binary name?! @done(2024-05-25)
					- RESOLVE KEYBOARD mapping issues @done(2024-05-25)
					- show COMn:S/N in status bar for Windows! @done(2024-05-25)
					- Missing some cases of switch .spin2 editor windows @done(2024-05-27)
					- Fix Spin2 built-in ram loader @done(2024-05-31)
					- Why P2 check not seeing P2 at startup? @done(2024-06-03)
					- P2 loader - not repeatable detection at startup. @done(2024-06-03)
						- fixed timings and added retry loop as other extensions seem to affect our timing and we miss the p2 boot window @done(2024-06-03)
					- Seeing extra byte on small file download in base64... is problem? @done(2024-06-03)
						- compiler?  NOPE @done(2024-06-03)
						- loader? YEP, fixed @done(2024-06-03)
						- let's dump in hex too @done(2024-06-03)
						- let's compare with PNUT output @done(2024-06-03)
					- Fix Spin2 built-in flasher to FLASH @done(2024-06-04)
						- flash loader appears to work. is flash image correct? @done(2024-06-04)
					- Occasionally now still not setting up download bin due to current editor... @done(2024-06-04)
					- Why not updating plug from N/A when found (VSC Status Bar) ?? @done(2024-06-09)
					- Add filtering for compile and download: .spin2 only for pnut and pnut-Ts, spin1 and spin2 for flexspin @done(2024-06-09)
					- Do option caescelance when more than 4 options @done(2024-06-11)
					- FlexSpin make sure option combining works! @done(2024-06-11)
					- Fix flasher flexspin (doesn't seem to be working?!) - or does work? @done(2024-06-11)
						- BAD - PROVE that toolset discovery works on Windows 11 (parallels)  NOPE @done(2024-06-12)
						- BAD - PROVE that PropPlug discovery works on Windows 11 (parallels)  NOPE @done(2024-06-12)
					DOC UPDATES NEEDED:
						- Spin2-settings.md @done(2024-06-12)
							- section on toolchain with screen capture @done(2024-06-12)
							- replace 2 keymaps with 3 new @done(2024-06-12)
						- Spin2-Keymap.md @done(2024-06-12)
							- replace 2 keymaps link to three in Spin2-settings.md @done(2024-06-12)
						- TASKS-user-macOS.md @done(2024-06-12)
							- rewrite key bindings section @done(2024-06-12)
						- TASKS-user-RPi.md @done(2024-06-12)
							- rewrite key bindings section @done(2024-06-12)
						- TASKS-user-win.md @done(2024-06-12)
							- rewrite key bindings section @done(2024-06-12)
						- README.md @done(2024-06-12)
							- update TOC @done(2024-06-12)
							- add? new features (build system description) @done(2024-06-12)
						- InsertMode.md @done(2024-06-12)
							- fix keystrokes per platform @done(2024-06-12)
					Options From ADA:
						- (-1) Well, the most important one is -1bc, which compiles to Spin bytecodes that are executed by the ROM interpreter (just like Propeller Tool). This is quite important in that the 32K RAM on the P1 get filled up concerningly quickly when compiling to native code. @done(2024-06-14)
						-  (BOTH) Also, there the --charset=xxx option, which is rather important. This affects the format of any strings in the program. By default UTF-8 is used, but for compatibility with PropTool/PNut, it should be --charset=parallax (you will notice this especially when a program tries to use the P1 ROM font). There's also --charset=latin1, which is the same as parallax but without the box drawing characters and --charset=shiftjis, which is Shift-JIS (duh). @done(2024-06-14)
						- (-2) There's also a -2nu mode that can be used on P2, but IME that one's a bit half-baked. Those backend selections are the most important thing. @done(2024-06-14)
						- (-2) Oh, and there's also --compress, which will reduce the size of the binary file by compressing it and prepending some code that decompresses it. Aside from the obvious benefit, when loading the chip, the decompression takes less time than is saved by transferring less data, so iteration time is improved by this. Only works for P2. @done(2024-06-14)
					- DEMO Video for general population ( or just do working demo ) @done(2024-06-12)
				
				- NOTE: Ctrl+super+c -> Ctrl+CmdR+c !!!
				
				KEYBOARD MAPPING TROUBLES:
					- Trying to get Windows to use Win key.
					- Win key mentioned in "windows": "Ctrl+Win+A" for example doesn't show correctly.
					- Win key mentioned in "key" shows up correctly only if "linux" directive is not present
					- FILED: https://github.com/microsoft/vscode-discussions/discussions/1200
					- "key": "Ctrl+Win+h",
						"mac": "Ctrl+Alt+h",
						"linux": "Ctrl+Alt+h",
					NOTE: this causes Ctrl+Alt+h on Windows and for underlying command to be not found! when executed (or is it the Win version are failing?)
				
				Simplifying User Tasks:
						RESEARCH, EXPERIMENTATION NEEDED:
					Can an extension write to user tasks?  NO!
					However, an extension can provide task definitions that the user can then use to create tasks. This is done by contributing a taskDefinitions contribution point in the extension's package.json file.
					- https://code.visualstudio.com/api/extension-guides/task-provider
				
				Pkg POSSIBILTIES:
					- ea. platform .exe is in assests on each Release
					- Spin2 VSCExt downloads the needed binary from the releases page
						-  -OR- User installs each release and Spin2 VSCExt just informs of newer being available
						- Ship in Folder for platforms
							- folder contents:
								- README w/links to repo, issue reporting
								- AUTHOR
								- LICENSE
								- EXE
				
				UI Changes:
					- command to toggle debug - show state in bottom bar @done(2024-05-18)
					- command to toggle download to flash - show state in bottom bar @done(2024-05-18)
					- command to serach for plugs and show list if more than one found (so user can choose which to use) @done(2024-05-20)
						-  if one, sets it and informs @done(2024-05-20)
						- if NONE, just informs and clears selection @done(2024-05-20)
					- ?? show the selected comm device on the status bar ?? @done(2024-05-20)
				
				VSCode Compile Settings:
						- enable debug @done(2024-05-18)
						- enable .lst @done(2024-05-18)
						- enable .bin @done(2024-05-18)
				
				VSCode FLASHer Settings:
						- list[...] of ports found @done(2024-05-24)
						- Project Settings: Selected port @done(2024-05-18)
						- download to ram -OR- flash @done(2024-05-18)
						- load using built-in or loadp2 @done(2024-05-24)
						- Project Settings: load command for this project @done(2024-05-24)
						- Maybe suggest that loadp2 from flexspin be used in more complex cases (such as multiple files, or load at address)
						LoadP2 has:
							- user baud
							- loader baud
							- clock freq
							- clock mode
							- starting address
							- enter terminal after download
							- load multiple files with address for each
						
		
		TODOs:
			CLEAN UP TS-NODE experiment:
				- remove ts_node @done(2024-05-17)
				- comment out code using ts_node @done(2024-05-17)
				- clean up .vscodeignore (remove ts_node/.bin support) @done(2024-05-17)
			Get Flasher working experiment:
				- install Node SerialPort in client @done(2024-05-17)
				- add three .ts files from usbWork branch @done(2024-05-17)
				- add command support in extension.ts / package.json @done(2024-05-17)
		
		
	TESTS:
		- New Task
		
	COMMAND LINE EXAMPLES: LISTING DEVICES:
		
		MacOS:
			$ ll /dev/tty.u*
			crw-rw-rw-  1 root  wheel  0x9000000 Apr 25 21:41 /dev/tty.usbserial-P9whu7bn
			stephen@ev3studio ~ [] $ 
			
		LINUX :
			ll /dev/ttyU*
			crw-rw---- 1 root dialout 188, 0 Apr 25 19:07 /dev/ttyUSB0
			pi@pi4blue:~ $ 
			
			LINUX Device TREE:
				pi@pi4blue:~ $ ll /sys/bus/usb/devices/
				total 0
				lrwxrwxrwx 1 root root 0 Apr 27 16:05 1-0:1.0 -> ../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-0:1.0
				lrwxrwxrwx 1 root root 0 Apr 27 16:05 1-1 -> ../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-1
				lrwxrwxrwx 1 root root 0 Apr 27 16:05 1-1:1.0 -> ../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-1/1-1:1.0
				lrwxrwxrwx 1 root root 0 Apr 25 19:07 1-1.4 -> ../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-1/1-1.4
				lrwxrwxrwx 1 root root 0 Apr 25 19:07 1-1.4:1.0 -> ../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-1/1-1.4/1-1.4:1.0
				lrwxrwxrwx 1 root root 0 Apr 27 16:05 2-0:1.0 -> ../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb2/2-0:1.0
				lrwxrwxrwx 1 root root 0 Apr 27 16:05 usb1 -> ../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1
				lrwxrwxrwx 1 root root 0 Apr 27 16:05 usb2 -> ../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb2
				
				pi@pi4blue:~ $ ll /sys/bus/usb/drivers/usbserial_generic/
				total 0
				--w------- 1 root root 4096 Apr 27 16:10 bind
				lrwxrwxrwx 1 root root    0 Apr 27 16:10 module -> ../../../../module/usbserial
				--w------- 1 root root 4096 Apr 27 16:10 uevent
				--w------- 1 root root 4096 Apr 27 16:10 unbind
				
				/sys/bus/usb/drivers/ftdi_sio:
				total 0
				lrwxrwxrwx 1 root root    0 Apr 27 16:13 1-1.4:1.0 -> ../../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-1/1-1.4/1-1.4:1.0
				--w------- 1 root root 4096 Apr 27 16:13 bind
				lrwxrwxrwx 1 root root    0 Apr 27 16:13 module -> ../../../../module/usbserial
				--w------- 1 root root 4096 Apr 27 16:13 uevent
				--w------- 1 root root 4096 Apr 27 16:13 unbind
				
				/sys/bus/usb/drivers/usb:
				total 0
				lrwxrwxrwx 1 root root    0 Apr 27 16:13 1-1 -> ../../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-1
				lrwxrwxrwx 1 root root    0 Apr 27 16:13 1-1.4 -> ../../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-1/1-1.4
				--w------- 1 root root 4096 Apr 27 16:13 bind
				--w------- 1 root root 4096 Apr 27 16:13 uevent
				--w------- 1 root root 4096 Apr 27 16:13 unbind
				lrwxrwxrwx 1 root root    0 Apr 27 16:13 usb1 -> ../../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1
				lrwxrwxrwx 1 root root    0 Apr 27 16:13 usb2 -> ../../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb2
				
				/sys/bus/usb/drivers/hub:
				total 0
				lrwxrwxrwx 1 root root    0 Apr 27 16:13 1-0:1.0 -> ../../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-0:1.0
				lrwxrwxrwx 1 root root    0 Apr 27 16:13 1-1:1.0 -> ../../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-1/1-1:1.0
				lrwxrwxrwx 1 root root    0 Apr 27 16:13 2-0:1.0 -> ../../../../devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb2/2-0:1.0
				--w------- 1 root root 4096 Apr 27 16:13 bind
				-rw-r--r-- 1 root root 4096 Apr 27 16:13 new_id
				-rw-r--r-- 1 root root 4096 Apr 27 16:13 remove_id
				--w------- 1 root root 4096 Apr 27 16:13 uevent
				--w------- 1 root root 4096 Apr 27 16:13 unbind
				
				/sys/bus/usb/drivers/usbserial_generic:
				total 0
				--w------- 1 root root 4096 Apr 27 16:10 bind
				lrwxrwxrwx 1 root root    0 Apr 27 16:10 module -> ../../../../module/usbserial
				--w------- 1 root root 4096 Apr 27 16:10 uevent
				--w------- 1 root root 4096 Apr 27 16:10 unbind
			
			$ udevadm info -a -p $(udevadm info -q path -n /dev/ttyUSB0) >udevadm.lst
			- give detailed info about driver hierarchy... serail number can be found by back tracing
			- "PropPlug" can also be found!
			
			
		Windows:
		- two diff commands....
		C:\Users\stephen>chgport
		COM3 = \Device\VCP0
		
		C:\Users\stephen>mode
		
		Status for device COM3
		-----------------------
			Baud:            1200
			Parity:          Even
			Data Bits:       7
			Stop Bits:       1
			Timeout:         OFF
			XON/XOFF:        OFF
			CTS handshaking: OFF
			DSR handshaking: OFF
			DSR sensitivity: OFF
			DTR circuit:     ON
			RTS circuit:     ON
		
		
		Status for device CON
		----------------------
			Lines:          30
			Columns:        120
			Keyboard rate:  31
			Keyboard delay: 1
			Code page:      437

