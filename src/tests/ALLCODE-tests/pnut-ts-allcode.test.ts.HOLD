/* eslint-disable no-console */
'use strict';
import fs from 'fs';
import path from 'path';
// Import the glob function specifically
//import { glob } from 'glob';

// Alternatively, if you want to use the synchronous version, you can do:
import { sync as globSync } from 'glob';
import { PNutInTypeScript } from '../../pnut-ts';
import {
  appendDiagnosticString,
  compareListingFiles,
  compareObjOrBinFiles,
  fileExists,
  removeExistingFile,
  topLevel,
  waitForFiles
} from '../testUtils';

// test lives in <rootDir>/src/tests/FULL
const testDirPath = path.resolve(__dirname, '../../../TEST/ALLCODE-tests');
const toolPath = path.resolve(__dirname, '../../../dist');
const directories = [
  {
    name: 'Test directory',
    path: testDirPath,
    relFolder: testDirPath.replace(topLevel, './')
  },
  {
    name: 'Tool directory',
    path: toolPath,
    relFolder: toolPath.replace(topLevel, './')
  }
];

describe('Directory existence tests', () => {
  test.each(directories)('Directory exists: $relFolder', ({ path }) => {
    if (!fs.existsSync(path)) {
      throw new Error(`Directory does not exist: ${path}`);
    }
  });
});

//const TIMEOUT_7_SECONDS: number = 7000;
//const TIMEOUT_10_SECONDS: number = 10000;
const TIMEOUT_15_SECONDS: number = 10000;

describe('PNut_ts compiles .spin2 w/debug() correctly', () => {
  // Variable to store stderr output
  let stderrOutput: string[] = [];
  let stdErrOutFile: string;
  // Store the original process.stderr.write function
  const originalStderrWrite = process.stderr.write;
  // get our list of files to compile
  let files: string[] = [];
  try {
    files = globSync(`${testDirPath}/{debug_,isp_,coverage_debug_,jm_debug,Spin2_v,math_}*.spin2`);
  } catch (error) {
    console.error('ERROR: glob issue:', error);
  }
  if (files.length > 1) {
    // Don't' compile -pre.spin2 files!
    files = files.filter((file) => !file.includes('-pre.spin2'));
    // isp_dummy_flash_rpi is NOT a debug compile
    files = files.filter((file) => !file.includes('isp_dummy_flash_rpi.spin2'));
    // isp_dummy_flash is NOT a debug compile
    files = files.filter((file) => !file.includes('isp_dummy_flash.spin2'));
    files.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
  }
  //console.log(`* files=[${files.join(', ')}]`); // no extra file coming in here

  if (files.length > 0) {
    beforeEach(() => {
      // Override process.stderr.write
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      process.stderr.write = (chunk: any, encoding?: any, callback?: any) => {
        // Store the stderr output
        stderrOutput.push(chunk.toString());
        // Call the original function to ensure any other behaviors are preserved
        return originalStderrWrite.call(process.stderr, chunk, encoding, callback);
      };
    });

    afterEach(() => {
      // Restore the original process.stderr.write function
      process.stderr.write = originalStderrWrite;

      // Write the stderr output to a file
      fs.writeFileSync(stdErrOutFile, stderrOutput.join('\n'));

      // Clear the stderrOutput array for the next test
      stderrOutput = [];
    });
  }

  let PNut_ts_compiler: PNutInTypeScript;

  files.forEach((file) => {
    test(
      `Compile file: ${path.basename(file)}`,
      async () => {
        const basename = path.basename(file, '.spin2');

        const listingFSpec = path.join(testDirPath, `${basename}.lst`);
        const objectFSpec = path.join(testDirPath, `${basename}.obj`);
        const binaryFSpec = path.join(testDirPath, `${basename}.bin`);
        const elementsFSpec = path.join(testDirPath, `${basename}.elem`);
        const errorFSpec = path.join(testDirPath, `${basename}.errout`);
        stdErrOutFile = errorFSpec; // tell stderr capture what filespec to use

        // Remove existing files
        removeExistingFile(listingFSpec);
        removeExistingFile(objectFSpec);
        removeExistingFile(binaryFSpec);
        removeExistingFile(elementsFSpec);
        removeExistingFile(errorFSpec);
        stderrOutput = [];

        // compile our file generating output files
        const testArguments: string[] = ['node', 'pnut-ts.js', '-d', '-l', '-O', '--regression', 'element', '--', `${file}`];
        //console.log(`* TEST sending testArguments=[${testArguments}]`);
        try {
          PNut_ts_compiler = new PNutInTypeScript(testArguments);
          //PNut_ts_instance.setArgs(testArguments);
          await PNut_ts_compiler.run();
        } catch (error) {
          // Write the error message to a .errout file
          console.error(`Execution failed for ${file}`);
          if (error instanceof Error) {
            console.error(error.toString());
          } else {
            // Handle the case where error is not an Error object
            console.error(`Non-error thrown: ${JSON.stringify(error)}`);
          } // Re-throw the error if you want the test to fail
          throw error;
        }

        const allFilesExist: boolean = await waitForFiles([listingFSpec, objectFSpec, binaryFSpec]);
        // ensure all output files were generated!
        let whatFailed: string = '';
        if (!allFilesExist) {
          let allFilesPresent: boolean = false;
          let fileGenerated: boolean = fileExists(listingFSpec);
          if (!fileGenerated) {
            whatFailed = appendDiagnosticString(whatFailed, '.lst', ', ');
            allFilesPresent = false;
          }

          fileGenerated = fileExists(objectFSpec);
          if (!fileGenerated) {
            whatFailed = appendDiagnosticString(whatFailed, '.obj', ', ');
            allFilesPresent = false;
          }

          fileGenerated = fileExists(binaryFSpec);
          if (!fileGenerated) {
            whatFailed = appendDiagnosticString(whatFailed, '.bin', ', ');
            allFilesPresent = false;
          }

          if (allFilesPresent == false) {
            whatFailed = appendDiagnosticString(whatFailed, 'File(s) Missing - Compare Aborted', ' ');
          }
        } else {
          let allFilesMatch: boolean = true;
          // ID the golden listing file
          const goldenFSpec = path.join(testDirPath, `${basename}.lst.GOLD`);
          // Compare listing files
          let filesMatch: boolean = compareListingFiles(listingFSpec, goldenFSpec);
          if (!filesMatch) {
            whatFailed = appendDiagnosticString(whatFailed, 'Listing File', ', ');
            allFilesMatch = false;
          }

          // ID the golden .obj file
          const goldenObjFSpec = path.join(testDirPath, `${basename}.obj.GOLD`);
          // Compare object files
          filesMatch = compareObjOrBinFiles(objectFSpec, goldenObjFSpec);
          if (!filesMatch) {
            whatFailed = appendDiagnosticString(whatFailed, 'Object File', ', ');
            allFilesMatch = false;
          }

          // ID the golden .bin file
          const goldenBinFSpec = path.join(testDirPath, `${basename}.bin.GOLD`);
          // Compare binary files
          filesMatch = compareObjOrBinFiles(binaryFSpec, goldenBinFSpec);
          if (!filesMatch) {
            whatFailed = appendDiagnosticString(whatFailed, 'Binary File', ', ');
            allFilesMatch = false;
          }

          if (allFilesMatch == false) {
            whatFailed = appendDiagnosticString(whatFailed, "Don't match!", ' ');
          }
        }

        expect(whatFailed).toBe('');
      },
      TIMEOUT_15_SECONDS
    );
  });
});

describe('PNut_ts compiles .spin2 w/o debug() correctly', () => {
  // Variable to store stderr output
  let stderrOutput: string[] = [];
  let stdErrOutFile: string;
  // Store the original process.stderr.write function
  const originalStderrWrite = process.stderr.write;
  // get our list of files to compile
  let files: string[] = [];
  try {
    files = globSync(`${testDirPath}/!(debug_|isp_|coverage_debug_|jm_debug|Spin2_v|math_)*.spin2`);
  } catch (error) {
    console.error('ERROR: glob issue:', error);
  }
  if (files.length > 1) {
    // Dont' compile -pre.spin2 files!
    files = files.filter((file) => !file.includes('-pre.spin2'));
    // add these files if they exist
    let specificFile: string = path.join(testDirPath, 'isp_dummy_flash_rpi.spin2');
    if (fs.existsSync(specificFile)) {
      files.push(specificFile);
    } else {
      console.warn(`Specific file not found: ${specificFile}`);
    }
    specificFile = path.join(testDirPath, 'isp_dummy_flash.spin2');
    if (fs.existsSync(specificFile)) {
      files.push(specificFile);
    } else {
      console.warn(`Specific file not found: ${specificFile}`);
    }
    files.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
  }
  //console.log(`* files=[${files.join(', ')}]`); // no extra file coming in here

  if (files.length > 0) {
    beforeEach(() => {
      // Override process.stderr.write
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      process.stderr.write = (chunk: any, encoding?: any, callback?: any) => {
        // Store the stderr output
        stderrOutput.push(chunk.toString());
        // Call the original function to ensure any other behaviors are preserved
        return originalStderrWrite.call(process.stderr, chunk, encoding, callback);
      };
    });

    afterEach(() => {
      // Restore the original process.stderr.write function
      process.stderr.write = originalStderrWrite;

      // Write the stderr output to a file
      fs.writeFileSync(stdErrOutFile, stderrOutput.join('\n'));

      // Clear the stderrOutput array for the next test
      stderrOutput = [];
    });
  }

  let PNut_ts_compilerNO: PNutInTypeScript;

  files.forEach((file) => {
    test(
      `Compile file: ${path.basename(file)}`,
      async () => {
        const basename = path.basename(file, '.spin2');

        const listingFSpec = path.join(testDirPath, `${basename}.lst`);
        const objectFSpec = path.join(testDirPath, `${basename}.obj`);
        const binaryFSpec = path.join(testDirPath, `${basename}.bin`);
        const elementsFSpec = path.join(testDirPath, `${basename}.elem`);
        const flashFSpec = path.join(testDirPath, `${basename}.flash`);
        const errorFSpec = path.join(testDirPath, `${basename}.errout`);
        stdErrOutFile = errorFSpec; // tell stderr capture what filespec to use

        // Remove existing files
        removeExistingFile(listingFSpec);
        removeExistingFile(objectFSpec);
        removeExistingFile(binaryFSpec);
        removeExistingFile(elementsFSpec);
        removeExistingFile(flashFSpec);
        removeExistingFile(errorFSpec);

        // compile our file generating output files
        const bNeedFlashFile: boolean = basename === 'isp_dummy_flash';
        const conditionalArgs: string[] = bNeedFlashFile ? ['-F'] : [];
        const testArguments: string[] = ['node', 'pnut-ts.js', '-l', '-O', '--regression', 'element', '--', `${file}`];
        const adjustedArgs: string[] = [...testArguments.slice(0, 2), ...conditionalArgs, ...testArguments.slice(2)];

        //console.log(`* TEST sending testArguments=[${testArguments}]`);
        try {
          PNut_ts_compilerNO = new PNutInTypeScript(adjustedArgs);
          //PNut_ts_instance.setArgs(testArguments);
          await PNut_ts_compilerNO.run();
        } catch (error) {
          // Write the error message to a .errout file
          console.error(`Execution failed for ${file}`);
          if (error instanceof Error) {
            console.error(error.toString());
          } else {
            // Handle the case where error is not an Error object
            console.error(`Non-error thrown: ${JSON.stringify(error)}`);
          } // Re-throw the error if you want the test to fail
          throw error;
        }

        const allTestFiles: string[] = [listingFSpec, objectFSpec, binaryFSpec];
        if (bNeedFlashFile) {
          allTestFiles.push(flashFSpec);
        }

        const allFilesExist: boolean = await waitForFiles(allTestFiles);
        let whatFailed: string = '';
        if (!allFilesExist) {
          // ensure all output files were generated!
          let allFilesPresent: boolean = false;
          let fileGenerated: boolean = fileExists(listingFSpec);
          if (!fileGenerated) {
            whatFailed = appendDiagnosticString(whatFailed, '.lst', ', ');
            allFilesPresent = false;
          }

          fileGenerated = fileExists(objectFSpec);
          if (!fileGenerated) {
            whatFailed = appendDiagnosticString(whatFailed, '.obj', ', ');
            allFilesPresent = false;
          }

          fileGenerated = fileExists(binaryFSpec);
          if (!fileGenerated) {
            whatFailed = appendDiagnosticString(whatFailed, '.bin', ', ');
            allFilesPresent = false;
          }
          if (bNeedFlashFile) {
            fileGenerated = fileExists(flashFSpec);
            if (!fileGenerated) {
              whatFailed = appendDiagnosticString(whatFailed, '.flash', ', ');
              allFilesPresent = false;
            }
          }

          if (allFilesPresent == false) {
            whatFailed = appendDiagnosticString(whatFailed, 'File(s) Missing - Compare Aborted', ' ');
          }
        } else {
          // count the number of matching outputs, should be 3!
          let allFilesMatch: boolean = true;
          // ID the golden listing file
          const goldenFSpec = path.join(testDirPath, `${basename}.lst.GOLD`);
          // Compare listing files
          let filesMatch: boolean = compareListingFiles(listingFSpec, goldenFSpec);
          if (!filesMatch) {
            whatFailed = appendDiagnosticString(whatFailed, 'Listing Files', ', ');
            allFilesMatch = false;
          }

          // ID the golden .obj file
          const goldenObjFSpec = path.join(testDirPath, `${basename}.obj.GOLD`);
          // Compare object files
          filesMatch = compareObjOrBinFiles(objectFSpec, goldenObjFSpec);
          if (!filesMatch) {
            whatFailed = appendDiagnosticString(whatFailed, 'Object Files', ', ');
            allFilesMatch = false;
          }

          // ID the golden .bin file
          const goldenBinFSpec = path.join(testDirPath, `${basename}.bin.GOLD`);
          // Compare binary files
          filesMatch = compareObjOrBinFiles(binaryFSpec, goldenBinFSpec);
          if (!filesMatch) {
            whatFailed = appendDiagnosticString(whatFailed, 'Binary Files', ', ');
            allFilesMatch = false;
          }

          // ID the golden .flash file
          const goldenFlashFSpec = path.join(testDirPath, `${basename}.flash.GOLD`);
          if (fileExists(goldenFlashFSpec)) {
            // Compare binary files
            filesMatch = compareObjOrBinFiles(flashFSpec, goldenFlashFSpec);
            if (!filesMatch) {
              whatFailed = appendDiagnosticString(whatFailed, 'Flash Files', ', ');
              allFilesMatch = false;
            }
          }

          if (allFilesMatch == false) {
            whatFailed = appendDiagnosticString(whatFailed, "Don't match!", ' ');
          }
        }
        expect(whatFailed).toBe('');
      },
      TIMEOUT_15_SECONDS
    );
  });
});
